name: 'lvh-run'
description: 'Runs LVH VMs for Cilium CI testing'
inputs:
  test-name:
    description: 'Unique test name'
    required: true
  image:
    description: 'LVH image name ("base", "kind", etc)'
    required: true
    default: 'kind'
  lvh-version:
    description: 'LVH cli version (Docker tag)'
    required: true
    default: 'latest'
  cmd:
    description: 'Commands to run in a VM'
    required: true
  ssh-port:
    description: 'SSH port for VM on a host'
    required: true
    default: 2222
  host-mount:
    description: 'Host dir path to mount in /host dir of a VM'
    required: true
  provision:
    description: 'Provision VM (if set to false, only given test cmd is going to be run)'
    required: true
    default: 'true'
runs:
  using: "composite"
  steps:
    - name: Find LVH cli
      if: ${{ inputs.provision == 'true' }}
      id: find-lvh-cli
      shell: bash
      run: |
        if [ -f "/bin/lvh" ]; then
          echo '::set-output name=skip::true'
        fi
    - name: Install LVH cli
      if: ${{ inputs.provision == 'true' && steps.find-lvh-cli.outputs.skip != 'true' }}
      shell: bash
      run: |
        cid=$(docker create quay.io/lvh-images/lvh:${{ inputs.lvh-version }})
        docker cp $cid:/usr/bin/lvh /bin/lvh
        docker rm $cid
    - uses: actions/cache@fd5de65bc895cf536527842281bea11763fefd77
      if: ${{ inputs.provision == 'true' }}
      id: cache-lvh-image
      with:
        path: /_images/${{ inputs.image}}.qcow2.zst
        key: lvh-image-${{ inputs.image }}
    - name: Fetch VM image
      if: ${{ inputs.provision == 'true' && steps.cache-lvh-image.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        mkdir /_images
        docker run -v /_images:/mnt/images quay.io/lvh-images/root-images:latest cp /data/images/${{ inputs.image }}.qcow2.zst /mnt/images
    - name: Prepare VM image
      if: ${{ inputs.provision == 'true'  }}
      shell: bash
      run: |
        cd /_images
        zstd -d ${{ inputs.image }}.qcow2.zst -o ${{ inputs.test-name }}.qcow2

    - name: Start VM
      if: ${{ inputs.provision == 'true' }}
      shell: bash
      run: |
        /bin/lvh run --host-mount=${{ inputs.host-mount }} --image /_images/${{ inputs.test-name }}.qcow2 --daemonize -p ${{ inputs.ssh-port }}:22

    - name: Run test cmd in VM
      shell: bash
      run: |
         ssh -p ${{ inputs.ssh-port }} -o "StrictHostKeyChecking=no" root@localhost << EOF
         ${{ inputs.cmd }}
         EOF
